#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const process = require('process')

if(process.argv.length < 3) {
  badUsage()
}

switch (process.argv[2]) {
  case 'list':
    listDirectory(process.argv[3])
    break
  case 'move':
    moveFiles(process.argv[3], process.argv[4])
    break
  default:
    badUsage()
}

function listDirectory (directory = '.') {
  const fileNames = []
  walkSync(directory, function (basedir, filename, stat) {
    if (!stat.isDirectory()) {
      fileNames.push(filename)
    }
  })

  fileNames.sort()
  for (let fileName of fileNames) {
    console.log(fileName)
  }
}

function moveFiles (fileList, directory = '.') {

}

function badUsage () {
  console.error(`Invalid usage.
  mass-file-mover list <directory|.>
  mass-file-mover move <fileList> <directory|.>
`)
  process.exit(-1)
}

/**
 * Synchronously list `dir` and all its descendents,
 * calling `iterator` for each entry.
 *
 * @param {String} dir Path to the base directory of the listing.
 * @param {Function} iterator Function that will be called
 * for each entry in the listing, passing 4 arguments:
 *   * `basedir`: Base directory of the entry (relative to `dir`).
 *   * `file`: Name of the file
 *   * `stat`: Result of calling `fs.stat`
 *
 */
function walkSync (dir, iterator) {
  const dirs = [dir]

  while (dirs.length) {
    const directory = dirs.shift()

    let files
    try {
      files = fs.readdirSync(directory)
    } catch (error) {
      console.error('ERROR: Cannot read directory ' + directory, error.message)
      continue
    }

    files.forEach(function (file) {
      const f = path.join(directory, file)
      let stat
      try {
        stat = fs.statSync(f)
        if (stat && stat.isDirectory()) {
          dirs.push(f)
        }
      } catch (error) {
        console.error('ERROR: Cannot stat ' + f, error.message)
      }

      if (stat) {
        iterator(directory, file, stat)
      }
    })
  }
}
